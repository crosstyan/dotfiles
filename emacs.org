#+TITLE: emaxorg
#+AUTHOR: Manish Parashar

* Table of Content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#use-better-defaults][Use better defaults]]
  - [[#load-customel][Load =.custom.el=]]
  - [[#load-secretel][Load =.secret.el=]]
- [[#theme][Theme]]
- [[#personal][Personal]]

* Bootstrap

** Crosstyan Modified
My personal package
*** Ranger
#+BEGIN_SRC emacs-lisp
(use-package ranger)
#+END_SRC
*** I Have a powerful computer
#+BEGIN_SRC emacs-lisp
(setq max-lisp-eval-depth 10000)
(setq max-specpdl-size 10000)
#+END_SRC
*** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil)
(setq evil-search-module 'evil-search
      evil-want-C-u-scroll t
      evil-want-C-w-in-emacs-state t)

(evil-mode t)
#+END_SRC
*** cnfonts
#+BEGIN_SRC emacs-lisp
(use-package cnfonts)
;; 让 cnfonts 随着 Emacs 自动生效。
(cnfonts-enable)
;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
(cnfonts-set-spacemacs-fallback-fonts)
#+END_SRC

** Use better defaults

Maximize by default, fullscreen on Windows. (not enabled)
#+BEGIN_SRC emacs-lisp
;; Start maximised (cross-platf)
;; (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC

Some UI elements are rather invasive. No-mouse master race.

#+BEGIN_SRC emacs-lisp
(when window-system
  ;(blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Here are what I consider better defaults as per my own experience.

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 left-margin-width 1 right-margin-width 1         ; Add left and right margins
 mode-require-final-newline 'visit                ; Add a newline at EOF on visit
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 recenter-positions '(5 top bottom)               ; Set re-centering positions
 redisplay-dont-pause t                           ; don't pause display on input
 debug-on-error t
 jit-lock-defer-time 0
 frame-resize-pixelwise t
 fast-but-imprecise-scrolling t
 scroll-conservatively 10000                      ; Always scroll by one line
 scroll-margin 1                                  ; scroll N lines to screen edge
 scroll-step 1                                    ; keyboard scroll one line at a time
 scroll-preserve-screen-position 1
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(delete-selection-mode)                           ; Replace region when inserting text
(setq line-number-mode t)                         ; Enable line numbers in the mode-line
(setq column-number-mode t)                       ; Enable column numbers in the mode-line
(size-indication-mode 1)                          ; Enable size status in the mode-line
(display-time-mode)                               ; Enable time in the mode-line
(fringe-mode 0)                                   ; Hide fringes
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-hl-line-mode)                             ; Hightlight current line
(show-paren-mode t)
(setq show-paren-style 'expression)
(global-subword-mode)                             ; Iterate through CamelCase words
;(menu-bar-mode 0)                                 ; Disable the menu bar
;(mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region

; (defvar mp/font-family            "Consolas"  "The font to use.")
; (defvar mp/font-size-default      100       "The font size to use for default text.")
; (defvar mp/font-size-header-line  100       "The font size to use for the header-line.")
; (defvar mp/font-size-mode-line    90       "The font size to use for the mode-line.")
; (defvar mp/font-size-title        100       "The font size to use for titles.")

#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Load =custom.el=

I don't have one so NO !!!!!!!!!!!!!

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

# #+BEGIN_SRC emacs-lisp
# (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
# (when (file-exists-p custom-file)
#   (load custom-file))
# #+END_SRC

** Load =secret.el=

I don't have one so NO !!!!!!!!!!!!!

I load =~/emax/secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

# #+BEGIN_SRC emacs-lisp

# (let ((secret.el (expand-file-name "secret.el" "~/emax/")))
#   (when (file-exists-p secret.el)
#     (load secret.el)))
# #+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(use-package vscode-dark-plus-theme
  :demand t
  :config
  (load-theme 'vscode-dark-plus t)
  ;; (load-theme 'solarized-light t)
  ;; (set-face-attribute 'font-lock-comment-face nil :italic t)
  ;; (set-face-attribute 'font-lock-doc-face nil :italic t)
  ;; (set-face-attribute 'default nil :height mp/font-size-default :font mp/font-family)
  ;; (set-face-attribute 'header-line nil :height mp/font-size-header-line)
  ;; (set-face-attribute 'mode-line nil :height mp/font-size-mode-line)
  ;; (set-face-attribute 'mode-line-inactive nil :height mp/font-size-mode-line)
)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package mdi
  :ensure nil
  :load-path "~/emax/lisp/mdi/"
  :after vscode-dark-plus-theme)
#+END_SRC

* Personal

** Bulit in keybindings
Key bindings not related to external packages or functions.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** Newline
Add newline to end of files.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Recentf
Number of items to be saved in recent file list.

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 2048)
#+end_src

** Whitespace
Delete trailing whitespaces on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Hyperlinks
Open hyperlinks at point. =C-c B(rowse)=.

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
(defun choose-browser (url &rest args)
  (interactive "sURL: ")
  (if (y-or-n-p "Use external browser? ")
    (browse-url-default-browser url)
    (w3m-browse-url url)))
(setq browse-url-browser-function 'choose-browser)
#+end_src

-----

[[#emaxorg][Back to top]]
